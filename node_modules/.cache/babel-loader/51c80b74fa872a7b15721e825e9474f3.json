{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nimport React, { useContext } from 'react';\nimport HTML from 'html-parse-stringify2';\nimport { getI18n, I18nContext, getDefaults } from './context';\nimport { warn, warnOnce } from './utils';\n\nfunction hasChildren(node) {\n  return node && (node.children || node.props && node.props.children);\n}\n\nfunction getChildren(node) {\n  if (!node) return [];\n  return node && node.children ? node.children : node.props && node.props.children;\n}\n\nfunction hasValidReactChildren(children) {\n  if (Object.prototype.toString.call(children) !== '[object Array]') return false;\n  return children.every(function (child) {\n    return React.isValidElement(child);\n  });\n}\n\nfunction getAsArray(data) {\n  return Array.isArray(data) ? data : [data];\n}\n\nfunction mergeProps(source, target) {\n  var newTarget = _objectSpread({}, target); // overwrite source.props when target.props already set\n\n\n  newTarget.props = Object.assign(source.props, target.props);\n  return newTarget;\n}\n\nexport function nodesToString(children, i18nOptions) {\n  if (!children) return '';\n  var stringNode = ''; // do not use `React.Children.toArray`, will fail at object children\n\n  var childrenArray = getAsArray(children);\n  var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || []; // e.g. lorem <br/> ipsum {{ messageCount, format }} dolor <strong>bold</strong> amet\n\n  childrenArray.forEach(function (child, childIndex) {\n    if (typeof child === 'string') {\n      // actual e.g. lorem\n      // expected e.g. lorem\n      stringNode += \"\".concat(child);\n    } else if (React.isValidElement(child)) {\n      var childPropsCount = Object.keys(child.props).length;\n      var shouldKeepChild = keepArray.indexOf(child.type) > -1;\n      var childChildren = child.props.children;\n\n      if (!childChildren && shouldKeepChild && childPropsCount === 0) {\n        // actual e.g. lorem <br/> ipsum\n        // expected e.g. lorem <br/> ipsum\n        stringNode += \"<\".concat(child.type, \"/>\");\n      } else if (!childChildren && (!shouldKeepChild || childPropsCount !== 0)) {\n        // actual e.g. lorem <hr className=\"test\" /> ipsum\n        // expected e.g. lorem <0></0> ipsum\n        stringNode += \"<\".concat(childIndex, \"></\").concat(childIndex, \">\");\n      } else if (child.props.i18nIsDynamicList) {\n        // we got a dynamic list like\n        // e.g. <ul i18nIsDynamicList>{['a', 'b'].map(item => ( <li key={item}>{item}</li> ))}</ul>\n        // expected e.g. \"<0></0>\", not e.g. \"<0><0>a</0><1>b</1></0>\"\n        stringNode += \"<\".concat(childIndex, \"></\").concat(childIndex, \">\");\n      } else if (shouldKeepChild && childPropsCount === 1 && typeof childChildren === 'string') {\n        // actual e.g. dolor <strong>bold</strong> amet\n        // expected e.g. dolor <strong>bold</strong> amet\n        stringNode += \"<\".concat(child.type, \">\").concat(childChildren, \"</\").concat(child.type, \">\");\n      } else {\n        // regular case mapping the inner children\n        var content = nodesToString(childChildren, i18nOptions);\n        stringNode += \"<\".concat(childIndex, \">\").concat(content, \"</\").concat(childIndex, \">\");\n      }\n    } else if (_typeof(child) === 'object') {\n      // e.g. lorem {{ value, format }} ipsum\n      var format = child.format,\n          clone = _objectWithoutProperties(child, [\"format\"]);\n\n      var keys = Object.keys(clone);\n\n      if (keys.length === 1) {\n        var value = format ? \"\".concat(keys[0], \", \").concat(format) : keys[0];\n        stringNode += \"{{\".concat(value, \"}}\");\n      } else {\n        // not a valid interpolation object (can only contain one value plus format)\n        warn(\"react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.\", child);\n      }\n    } else {\n      warn(\"Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.\", child);\n    }\n  });\n  return stringNode;\n}\n\nfunction renderNodes(children, targetString, i18n, i18nOptions, combinedTOpts) {\n  if (targetString === '') return []; // check if contains tags we need to replace from html string to react nodes\n\n  var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];\n  var emptyChildrenButNeedsHandling = targetString && new RegExp(keepArray.join('|')).test(targetString); // no need to replace tags in the targetstring\n\n  if (!children && !emptyChildrenButNeedsHandling) return [targetString]; // v2 -> interpolates upfront no need for \"some <0>{{var}}</0>\"\" -> will be just \"some {{var}}\" in translation file\n\n  var data = {};\n\n  function getData(childs) {\n    var childrenArray = getAsArray(childs);\n    childrenArray.forEach(function (child) {\n      if (typeof child === 'string') return;\n      if (hasChildren(child)) getData(getChildren(child));else if (_typeof(child) === 'object' && !React.isValidElement(child)) Object.assign(data, child);\n    });\n  }\n\n  getData(children);\n  var interpolatedString = i18n.services.interpolator.interpolate(targetString, _objectSpread({}, data, {}, combinedTOpts), i18n.language); // parse ast from string with additional wrapper tag\n  // -> avoids issues in parser removing prepending text nodes\n\n  var ast = HTML.parse(\"<0>\".concat(interpolatedString, \"</0>\"));\n\n  function mapAST(reactNode, astNode) {\n    var reactNodes = getAsArray(reactNode);\n    var astNodes = getAsArray(astNode);\n    return astNodes.reduce(function (mem, node, i) {\n      var translationContent = node.children && node.children[0] && node.children[0].content;\n\n      if (node.type === 'tag') {\n        var tmp = reactNodes[parseInt(node.name, 10)] || {};\n        var child = Object.keys(node.attrs).length !== 0 ? mergeProps({\n          props: node.attrs\n        }, tmp) : tmp;\n        var isElement = React.isValidElement(child);\n\n        if (typeof child === 'string') {\n          mem.push(child);\n        } else if (hasChildren(child)) {\n          var childs = getChildren(child);\n          var mappedChildren = mapAST(childs, node.children);\n          var inner = hasValidReactChildren(childs) && mappedChildren.length === 0 ? childs : mappedChildren;\n          if (child.dummy) child.children = inner; // needed on preact!\n\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          }), inner));\n        } else if (emptyChildrenButNeedsHandling && _typeof(child) === 'object' && child.dummy && !isElement) {\n          // we have a empty Trans node (the dummy element) with a targetstring that contains html tags needing\n          // conversion to react nodes\n          // so we just need to map the inner stuff\n          var _inner = mapAST(reactNodes\n          /* wrong but we need something */\n          , node.children);\n\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          }), _inner));\n        } else if (Number.isNaN(parseFloat(node.name))) {\n          if (i18nOptions.transSupportBasicHtmlNodes && keepArray.indexOf(node.name) > -1) {\n            if (node.voidElement) {\n              mem.push(React.createElement(node.name, {\n                key: \"\".concat(node.name, \"-\").concat(i)\n              }));\n            } else {\n              var _inner2 = mapAST(reactNodes\n              /* wrong but we need something */\n              , node.children);\n\n              mem.push(React.createElement(node.name, {\n                key: \"\".concat(node.name, \"-\").concat(i)\n              }, _inner2));\n            }\n          } else if (node.voidElement) {\n            mem.push(\"<\".concat(node.name, \" />\"));\n          } else {\n            var _inner3 = mapAST(reactNodes\n            /* wrong but we need something */\n            , node.children);\n\n            mem.push(\"<\".concat(node.name, \">\").concat(_inner3, \"</\").concat(node.name, \">\"));\n          }\n        } else if (_typeof(child) === 'object' && !isElement) {\n          var content = node.children[0] ? translationContent : null; // v1\n          // as interpolation was done already we just have a regular content node\n          // in the translation AST while having an object in reactNodes\n          // -> push the content no need to interpolate again\n\n          if (content) mem.push(content);\n        } else if (node.children.length === 1 && translationContent) {\n          // If component does not have children, but translation - has\n          // with this in component could be components={[<span class='make-beautiful'/>]} and in translation - 'some text <0>some highlighted message</0>'\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          }), translationContent));\n        } else {\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          })));\n        }\n      } else if (node.type === 'text') {\n        mem.push(node.content);\n      }\n\n      return mem;\n    }, []);\n  } // call mapAST with having react nodes nested into additional node like\n  // we did for the string ast from translation\n  // return the children of that extra node to get expected result\n\n\n  var result = mapAST([{\n    dummy: true,\n    children: children\n  }], ast);\n  return getChildren(result[0]);\n}\n\nexport function Trans(_ref) {\n  var children = _ref.children,\n      count = _ref.count,\n      parent = _ref.parent,\n      i18nKey = _ref.i18nKey,\n      tOptions = _ref.tOptions,\n      values = _ref.values,\n      defaults = _ref.defaults,\n      components = _ref.components,\n      ns = _ref.ns,\n      i18nFromProps = _ref.i18n,\n      tFromProps = _ref.t,\n      additionalProps = _objectWithoutProperties(_ref, [\"children\", \"count\", \"parent\", \"i18nKey\", \"tOptions\", \"values\", \"defaults\", \"components\", \"ns\", \"i18n\", \"t\"]);\n\n  var _ref2 = useContext(I18nContext) || {},\n      i18nFromContext = _ref2.i18n,\n      defaultNSFromContext = _ref2.defaultNS;\n\n  var i18n = i18nFromProps || i18nFromContext || getI18n();\n\n  if (!i18n) {\n    warnOnce('You will need pass in an i18next instance by using i18nextReactModule');\n    return children;\n  }\n\n  var t = tFromProps || i18n.t.bind(i18n) || function (k) {\n    return k;\n  };\n\n  var reactI18nextOptions = _objectSpread({}, getDefaults(), {}, i18n.options && i18n.options.react); // prepare having a namespace\n\n\n  var namespaces = ns || t.ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;\n  namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];\n  var defaultValue = defaults || nodesToString(children, reactI18nextOptions) || reactI18nextOptions.transEmptyNodeValue || i18nKey;\n  var hashTransKey = reactI18nextOptions.hashTransKey;\n  var key = i18nKey || (hashTransKey ? hashTransKey(defaultValue) : defaultValue);\n  var interpolationOverride = values ? {} : {\n    interpolation: {\n      prefix: '#$?',\n      suffix: '?$#'\n    }\n  };\n\n  var combinedTOpts = _objectSpread({}, tOptions, {\n    count: count\n  }, values, {}, interpolationOverride, {\n    defaultValue: defaultValue,\n    ns: namespaces\n  });\n\n  var translation = key ? t(key, combinedTOpts) : defaultValue;\n  var content = renderNodes(components || children, translation, i18n, reactI18nextOptions, combinedTOpts); // allows user to pass `null` to `parent`\n  // and override `defaultTransParent` if is present\n\n  var useAsParent = parent !== undefined ? parent : reactI18nextOptions.defaultTransParent;\n  return useAsParent ? React.createElement(useAsParent, additionalProps, content) : content;\n}","map":{"version":3,"sources":["/opt/lampp/htdocs/introrafte/node_modules/react-i18next/dist/es/Trans.js"],"names":["_objectWithoutProperties","_typeof","_defineProperty","ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","getOwnPropertyDescriptors","defineProperties","defineProperty","React","useContext","HTML","getI18n","I18nContext","getDefaults","warn","warnOnce","hasChildren","node","children","props","getChildren","hasValidReactChildren","prototype","toString","call","every","child","isValidElement","getAsArray","data","Array","isArray","mergeProps","newTarget","assign","nodesToString","i18nOptions","stringNode","childrenArray","keepArray","transKeepBasicHtmlNodesFor","childIndex","concat","childPropsCount","shouldKeepChild","indexOf","type","childChildren","i18nIsDynamicList","content","format","clone","value","renderNodes","targetString","i18n","combinedTOpts","emptyChildrenButNeedsHandling","RegExp","join","test","getData","childs","interpolatedString","services","interpolator","interpolate","language","ast","parse","mapAST","reactNode","astNode","reactNodes","astNodes","reduce","mem","translationContent","tmp","parseInt","name","attrs","isElement","mappedChildren","inner","dummy","cloneElement","_inner","Number","isNaN","parseFloat","transSupportBasicHtmlNodes","voidElement","createElement","_inner2","_inner3","result","Trans","_ref","count","parent","i18nKey","tOptions","values","defaults","components","ns","i18nFromProps","tFromProps","t","additionalProps","_ref2","i18nFromContext","defaultNSFromContext","defaultNS","bind","k","reactI18nextOptions","options","react","namespaces","defaultValue","transEmptyNodeValue","hashTransKey","interpolationOverride","interpolation","prefix","suffix","translation","useAsParent","undefined","defaultTransParent"],"mappings":"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","sourcesContent":["import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _typeof from \"@babel/runtime/helpers/typeof\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useContext } from 'react';\nimport HTML from 'html-parse-stringify2';\nimport { getI18n, I18nContext, getDefaults } from './context';\nimport { warn, warnOnce } from './utils';\n\nfunction hasChildren(node) {\n  return node && (node.children || node.props && node.props.children);\n}\n\nfunction getChildren(node) {\n  if (!node) return [];\n  return node && node.children ? node.children : node.props && node.props.children;\n}\n\nfunction hasValidReactChildren(children) {\n  if (Object.prototype.toString.call(children) !== '[object Array]') return false;\n  return children.every(function (child) {\n    return React.isValidElement(child);\n  });\n}\n\nfunction getAsArray(data) {\n  return Array.isArray(data) ? data : [data];\n}\n\nfunction mergeProps(source, target) {\n  var newTarget = _objectSpread({}, target); // overwrite source.props when target.props already set\n\n\n  newTarget.props = Object.assign(source.props, target.props);\n  return newTarget;\n}\n\nexport function nodesToString(children, i18nOptions) {\n  if (!children) return '';\n  var stringNode = ''; // do not use `React.Children.toArray`, will fail at object children\n\n  var childrenArray = getAsArray(children);\n  var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || []; // e.g. lorem <br/> ipsum {{ messageCount, format }} dolor <strong>bold</strong> amet\n\n  childrenArray.forEach(function (child, childIndex) {\n    if (typeof child === 'string') {\n      // actual e.g. lorem\n      // expected e.g. lorem\n      stringNode += \"\".concat(child);\n    } else if (React.isValidElement(child)) {\n      var childPropsCount = Object.keys(child.props).length;\n      var shouldKeepChild = keepArray.indexOf(child.type) > -1;\n      var childChildren = child.props.children;\n\n      if (!childChildren && shouldKeepChild && childPropsCount === 0) {\n        // actual e.g. lorem <br/> ipsum\n        // expected e.g. lorem <br/> ipsum\n        stringNode += \"<\".concat(child.type, \"/>\");\n      } else if (!childChildren && (!shouldKeepChild || childPropsCount !== 0)) {\n        // actual e.g. lorem <hr className=\"test\" /> ipsum\n        // expected e.g. lorem <0></0> ipsum\n        stringNode += \"<\".concat(childIndex, \"></\").concat(childIndex, \">\");\n      } else if (child.props.i18nIsDynamicList) {\n        // we got a dynamic list like\n        // e.g. <ul i18nIsDynamicList>{['a', 'b'].map(item => ( <li key={item}>{item}</li> ))}</ul>\n        // expected e.g. \"<0></0>\", not e.g. \"<0><0>a</0><1>b</1></0>\"\n        stringNode += \"<\".concat(childIndex, \"></\").concat(childIndex, \">\");\n      } else if (shouldKeepChild && childPropsCount === 1 && typeof childChildren === 'string') {\n        // actual e.g. dolor <strong>bold</strong> amet\n        // expected e.g. dolor <strong>bold</strong> amet\n        stringNode += \"<\".concat(child.type, \">\").concat(childChildren, \"</\").concat(child.type, \">\");\n      } else {\n        // regular case mapping the inner children\n        var content = nodesToString(childChildren, i18nOptions);\n        stringNode += \"<\".concat(childIndex, \">\").concat(content, \"</\").concat(childIndex, \">\");\n      }\n    } else if (_typeof(child) === 'object') {\n      // e.g. lorem {{ value, format }} ipsum\n      var format = child.format,\n          clone = _objectWithoutProperties(child, [\"format\"]);\n\n      var keys = Object.keys(clone);\n\n      if (keys.length === 1) {\n        var value = format ? \"\".concat(keys[0], \", \").concat(format) : keys[0];\n        stringNode += \"{{\".concat(value, \"}}\");\n      } else {\n        // not a valid interpolation object (can only contain one value plus format)\n        warn(\"react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.\", child);\n      }\n    } else {\n      warn(\"Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.\", child);\n    }\n  });\n  return stringNode;\n}\n\nfunction renderNodes(children, targetString, i18n, i18nOptions, combinedTOpts) {\n  if (targetString === '') return []; // check if contains tags we need to replace from html string to react nodes\n\n  var keepArray = i18nOptions.transKeepBasicHtmlNodesFor || [];\n  var emptyChildrenButNeedsHandling = targetString && new RegExp(keepArray.join('|')).test(targetString); // no need to replace tags in the targetstring\n\n  if (!children && !emptyChildrenButNeedsHandling) return [targetString]; // v2 -> interpolates upfront no need for \"some <0>{{var}}</0>\"\" -> will be just \"some {{var}}\" in translation file\n\n  var data = {};\n\n  function getData(childs) {\n    var childrenArray = getAsArray(childs);\n    childrenArray.forEach(function (child) {\n      if (typeof child === 'string') return;\n      if (hasChildren(child)) getData(getChildren(child));else if (_typeof(child) === 'object' && !React.isValidElement(child)) Object.assign(data, child);\n    });\n  }\n\n  getData(children);\n  var interpolatedString = i18n.services.interpolator.interpolate(targetString, _objectSpread({}, data, {}, combinedTOpts), i18n.language); // parse ast from string with additional wrapper tag\n  // -> avoids issues in parser removing prepending text nodes\n\n  var ast = HTML.parse(\"<0>\".concat(interpolatedString, \"</0>\"));\n\n  function mapAST(reactNode, astNode) {\n    var reactNodes = getAsArray(reactNode);\n    var astNodes = getAsArray(astNode);\n    return astNodes.reduce(function (mem, node, i) {\n      var translationContent = node.children && node.children[0] && node.children[0].content;\n\n      if (node.type === 'tag') {\n        var tmp = reactNodes[parseInt(node.name, 10)] || {};\n        var child = Object.keys(node.attrs).length !== 0 ? mergeProps({\n          props: node.attrs\n        }, tmp) : tmp;\n        var isElement = React.isValidElement(child);\n\n        if (typeof child === 'string') {\n          mem.push(child);\n        } else if (hasChildren(child)) {\n          var childs = getChildren(child);\n          var mappedChildren = mapAST(childs, node.children);\n          var inner = hasValidReactChildren(childs) && mappedChildren.length === 0 ? childs : mappedChildren;\n          if (child.dummy) child.children = inner; // needed on preact!\n\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          }), inner));\n        } else if (emptyChildrenButNeedsHandling && _typeof(child) === 'object' && child.dummy && !isElement) {\n          // we have a empty Trans node (the dummy element) with a targetstring that contains html tags needing\n          // conversion to react nodes\n          // so we just need to map the inner stuff\n          var _inner = mapAST(reactNodes\n          /* wrong but we need something */\n          , node.children);\n\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          }), _inner));\n        } else if (Number.isNaN(parseFloat(node.name))) {\n          if (i18nOptions.transSupportBasicHtmlNodes && keepArray.indexOf(node.name) > -1) {\n            if (node.voidElement) {\n              mem.push(React.createElement(node.name, {\n                key: \"\".concat(node.name, \"-\").concat(i)\n              }));\n            } else {\n              var _inner2 = mapAST(reactNodes\n              /* wrong but we need something */\n              , node.children);\n\n              mem.push(React.createElement(node.name, {\n                key: \"\".concat(node.name, \"-\").concat(i)\n              }, _inner2));\n            }\n          } else if (node.voidElement) {\n            mem.push(\"<\".concat(node.name, \" />\"));\n          } else {\n            var _inner3 = mapAST(reactNodes\n            /* wrong but we need something */\n            , node.children);\n\n            mem.push(\"<\".concat(node.name, \">\").concat(_inner3, \"</\").concat(node.name, \">\"));\n          }\n        } else if (_typeof(child) === 'object' && !isElement) {\n          var content = node.children[0] ? translationContent : null; // v1\n          // as interpolation was done already we just have a regular content node\n          // in the translation AST while having an object in reactNodes\n          // -> push the content no need to interpolate again\n\n          if (content) mem.push(content);\n        } else if (node.children.length === 1 && translationContent) {\n          // If component does not have children, but translation - has\n          // with this in component could be components={[<span class='make-beautiful'/>]} and in translation - 'some text <0>some highlighted message</0>'\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          }), translationContent));\n        } else {\n          mem.push(React.cloneElement(child, _objectSpread({}, child.props, {\n            key: i\n          })));\n        }\n      } else if (node.type === 'text') {\n        mem.push(node.content);\n      }\n\n      return mem;\n    }, []);\n  } // call mapAST with having react nodes nested into additional node like\n  // we did for the string ast from translation\n  // return the children of that extra node to get expected result\n\n\n  var result = mapAST([{\n    dummy: true,\n    children: children\n  }], ast);\n  return getChildren(result[0]);\n}\n\nexport function Trans(_ref) {\n  var children = _ref.children,\n      count = _ref.count,\n      parent = _ref.parent,\n      i18nKey = _ref.i18nKey,\n      tOptions = _ref.tOptions,\n      values = _ref.values,\n      defaults = _ref.defaults,\n      components = _ref.components,\n      ns = _ref.ns,\n      i18nFromProps = _ref.i18n,\n      tFromProps = _ref.t,\n      additionalProps = _objectWithoutProperties(_ref, [\"children\", \"count\", \"parent\", \"i18nKey\", \"tOptions\", \"values\", \"defaults\", \"components\", \"ns\", \"i18n\", \"t\"]);\n\n  var _ref2 = useContext(I18nContext) || {},\n      i18nFromContext = _ref2.i18n,\n      defaultNSFromContext = _ref2.defaultNS;\n\n  var i18n = i18nFromProps || i18nFromContext || getI18n();\n\n  if (!i18n) {\n    warnOnce('You will need pass in an i18next instance by using i18nextReactModule');\n    return children;\n  }\n\n  var t = tFromProps || i18n.t.bind(i18n) || function (k) {\n    return k;\n  };\n\n  var reactI18nextOptions = _objectSpread({}, getDefaults(), {}, i18n.options && i18n.options.react); // prepare having a namespace\n\n\n  var namespaces = ns || t.ns || defaultNSFromContext || i18n.options && i18n.options.defaultNS;\n  namespaces = typeof namespaces === 'string' ? [namespaces] : namespaces || ['translation'];\n  var defaultValue = defaults || nodesToString(children, reactI18nextOptions) || reactI18nextOptions.transEmptyNodeValue || i18nKey;\n  var hashTransKey = reactI18nextOptions.hashTransKey;\n  var key = i18nKey || (hashTransKey ? hashTransKey(defaultValue) : defaultValue);\n  var interpolationOverride = values ? {} : {\n    interpolation: {\n      prefix: '#$?',\n      suffix: '?$#'\n    }\n  };\n\n  var combinedTOpts = _objectSpread({}, tOptions, {\n    count: count\n  }, values, {}, interpolationOverride, {\n    defaultValue: defaultValue,\n    ns: namespaces\n  });\n\n  var translation = key ? t(key, combinedTOpts) : defaultValue;\n  var content = renderNodes(components || children, translation, i18n, reactI18nextOptions, combinedTOpts); // allows user to pass `null` to `parent`\n  // and override `defaultTransParent` if is present\n\n  var useAsParent = parent !== undefined ? parent : reactI18nextOptions.defaultTransParent;\n  return useAsParent ? React.createElement(useAsParent, additionalProps, content) : content;\n}"]},"metadata":{},"sourceType":"module"}