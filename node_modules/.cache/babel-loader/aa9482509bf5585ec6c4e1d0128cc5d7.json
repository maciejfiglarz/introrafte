{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _throttle = _interopRequireDefault(require(\"lodash/throttle\"));\n\nvar _times = _interopRequireDefault(require(\"lodash/times\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _config = _interopRequireDefault(require(\"../constants/config\"));\n\nvar _CarouselItem = _interopRequireDefault(require(\"./CarouselItem\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _interopRequireWildcard(obj) {\n  if (obj && obj.__esModule) {\n    return obj;\n  } else {\n    var newObj = {};\n\n    if (obj != null) {\n      for (var key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n          var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};\n\n          if (desc.get || desc.set) {\n            Object.defineProperty(newObj, key, desc);\n          } else {\n            newObj[key] = obj[key];\n          }\n        }\n      }\n    }\n\n    newObj.default = obj;\n    return newObj;\n  }\n}\n/* eslint-disable react/no-unused-prop-types */\n// we disable propTypes usage checking as we use getProp function\n\n/* eslint react/no-deprecated: 0 */\n// TODO: update componentWillReceiveProps compononent to use static getDerivedStateFromProps instead\n\n\nclass Carousel extends _react.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getCurrentValue = () => this.props.value;\n\n    this.getNeededAdditionalClones = () => Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n\n    this.getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n\n    this.getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n\n    this.getClonesLeft = () => _config.default.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n\n    this.getClonesRight = () => _config.default.numberOfInfiniteClones + this.getAdditionalClonesRight();\n\n    this.getAdditionalClonesOffset = () => -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n\n    this.getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      return props[propName];\n    };\n\n    this.checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n\n    this.resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      const autoPlay = this.getProp('autoPlay');\n\n      if (autoPlay != null) {\n        this.interval = setInterval(() => {\n          if (!document.hidden) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n\n    this.getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n\n        return [];\n      }\n\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n\n      return [this.props.children];\n    };\n\n    this.getActiveSlideIndex = () => this.getProp('infinite') ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length : this.getCurrentSlideIndex();\n\n    this.getSlidesBounds = (customValue = null) => {\n      const value = customValue == null ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      const times = (value + 1) / length;\n      const ceil = Math.ceil(times);\n      return {\n        low: (ceil - 1) * length,\n        high: ceil * length - 1\n      };\n    };\n\n    this.getTargetMod = (customValue = null) => {\n      const value = customValue == null ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n\n      return targetSlide;\n    };\n\n    this.getTargetSlide = () => {\n      if (this.state.infiniteTransitionFrom != null) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n\n      return this.getTargetMod();\n    };\n\n    this.onResize = (0, _throttle.default)(() => {\n      const width = this.node.offsetWidth;\n      this.setState({\n        carouselWidth: width,\n        windowWidth: window.innerWidth\n      });\n    }, _config.default.resizeEventListenerThrottle);\n\n    this.onTouchStart = (e, index) => {\n      this.setState({\n        clicked: index,\n        dragStart: e.changedTouches[0].pageX\n      });\n    };\n\n    this.onTouchMove = e => {\n      if (this.state.dragStart !== null) {\n        this.setState({\n          dragOffset: e.changedTouches[0].pageX - this.state.dragStart\n        });\n      }\n    };\n\n    this.onMouseUpTouchEnd = e => {\n      if (this.state.dragStart !== null) {\n        if (this.getProp('draggable')) {\n          if (Math.abs(this.state.dragOffset) > _config.default.clickDragThreshold) {\n            e.preventDefault();\n            this.changeSlide(this.getNearestSlideIndex());\n          } else if (this.getProp('clickToChange')) {\n            this.changeSlide(this.state.clicked);\n          }\n        }\n\n        this.setState({\n          clicked: null,\n          dragOffset: 0,\n          dragStart: null\n        });\n      }\n    };\n\n    this.onTransitionEnd = () => {\n      this.setState({\n        transitionEnabled: false,\n        infiniteTransitionFrom: null\n      });\n    };\n\n    this.clamp = value => {\n      const maxValue = this.getChildren().length - 1;\n\n      if (value > maxValue) {\n        return maxValue;\n      }\n\n      if (value < 0) {\n        return 0;\n      }\n\n      return value;\n    };\n\n    this.changeSlide = value => this.props.onChange(this.getProp('infinite') ? value : this.clamp(value));\n\n    this.nextSlide = () => this.changeSlide(this.getCurrentValue() + this.getProp('slidesPerScroll'));\n\n    this.prevSlide = () => this.changeSlide(this.getCurrentValue() - this.getProp('slidesPerScroll'));\n\n    this.getNearestSlideIndex = () => {\n      let slideIndexOffset = 0;\n\n      if (this.getProp('keepDirectionWhenDragging')) {\n        if (this.state.dragOffset > 0) {\n          slideIndexOffset = -Math.ceil(this.state.dragOffset / this.getCarouselElementWidth());\n        } else {\n          slideIndexOffset = -Math.floor(this.state.dragOffset / this.getCarouselElementWidth());\n        }\n      } else {\n        slideIndexOffset = -Math.round(this.state.dragOffset / this.getCarouselElementWidth());\n      }\n\n      return this.getCurrentValue() + slideIndexOffset;\n    };\n\n    this.getCurrentSlideIndex = () => {\n      if (this.getProp('infinite')) {\n        return this.getTargetSlide();\n      }\n\n      return this.clamp(this.getCurrentValue());\n    };\n\n    this.getCarouselElementWidth = () => this.props.itemWidth || this.state.carouselWidth / this.getProp('slidesPerPage');\n\n    this.getTransformOffset = () => {\n      const additionalOffset = this.getProp('centered') ? this.state.carouselWidth / 2 - this.getCarouselElementWidth() / 2 : 0;\n      const dragOffset = this.getProp('draggable') ? this.state.dragOffset : 0;\n      const currentValue = this.getActiveSlideIndex();\n      const additionalClonesOffset = this.getAdditionalClonesOffset();\n      return dragOffset - currentValue * this.getCarouselElementWidth() + additionalOffset - additionalClonesOffset;\n    };\n\n    this.renderCarouselItems = () => {\n      const transformOffset = this.getTransformOffset();\n      const children = this.getChildren();\n      const numberOfClonesLeft = this.getClonesLeft();\n      const numberOfClonesRight = this.getClonesRight();\n      const trackLengthMultiplier = 1 + (this.getProp('infinite') ? numberOfClonesLeft + numberOfClonesRight : 0);\n      const trackWidth = this.state.carouselWidth * children.length * trackLengthMultiplier;\n      const animationSpeed = this.getProp('animationSpeed');\n      const transitionEnabled = this.state.transitionEnabled;\n      const draggable = this.getProp('draggable') && children && children.length > 1;\n      const trackStyles = {\n        marginLeft: `${this.getAdditionalClonesOffset()}px`,\n        width: `${trackWidth}px`,\n        transform: `translateX(${transformOffset}px)`,\n        transitionDuration: transitionEnabled ? `${animationSpeed}ms, ${animationSpeed}ms` : null\n      };\n      let slides = children;\n\n      if (this.getProp('infinite')) {\n        const clonesLeft = (0, _times.default)(numberOfClonesLeft, () => children);\n        const clonesRight = (0, _times.default)(numberOfClonesRight, () => children);\n        slides = [].concat(...clonesLeft, children, ...clonesRight);\n      }\n\n      return _react.default.createElement(\"div\", {\n        className: \"BrainhubCarousel__trackContainer\"\n      }, _react.default.createElement(\"ul\", {\n        className: (0, _classnames.default)('BrainhubCarousel__track', {\n          'BrainhubCarousel__track--transition': transitionEnabled,\n          'BrainhubCarousel__track--draggable': draggable\n        }),\n        style: trackStyles,\n        ref: el => this.trackRef = el\n      }, slides.map((carouselItem, index) => _react.default.createElement(_CarouselItem.default, {\n        key: index,\n        currentSlideIndex: this.getActiveSlideIndex(),\n        index: index,\n        width: this.getCarouselElementWidth(),\n        offset: index !== slides.length ? this.props.offset : 0,\n        onTouchStart: this.onTouchStart,\n        clickable: this.getProp('clickToChange')\n      }, carouselItem))));\n    };\n\n    this.state = {\n      carouselWidth: 0,\n      windowWidth: 0,\n      clicked: null,\n      dragOffset: 0,\n      dragStart: null,\n      transitionEnabled: false,\n      infiniteTransitionFrom: null // indicates what slide we are transitioning from (in case of infinite carousel), contains number value or null\n\n    };\n    this.interval = null;\n  }\n  /* ========== initial handlers and positioning setup ========== */\n\n\n  componentDidMount() {\n    // adding listener to remove transition when animation finished\n    this.trackRef && this.trackRef.addEventListener('transitionend', this.onTransitionEnd); // adding event listeners for swipe\n\n    if (this.node) {\n      this.node.addEventListener('touchstart', this.onTouchStart, true);\n      this.node.addEventListener('touchmove', this.onTouchMove, {\n        passive: false\n      });\n      this.node.addEventListener('touchend', this.onMouseUpTouchEnd, true);\n    } // setting size of a carousel in state\n\n\n    window.addEventListener('resize', this.onResize);\n    this.onResize(); // setting size of a carousel in state based on styling\n\n    window.addEventListener('load', this.onResize); // setting autoplay interval\n\n    this.resetInterval();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const valueChanged = this.checkIfValueChanged(nextProps);\n\n    if (this.state.transitionEnabled) {\n      return this.setState({\n        transitionEnabled: valueChanged ? true : this.state.transitionEnabled\n      });\n    }\n\n    this.setState({\n      infiniteTransitionFrom: this.getCurrentValue(),\n      transitionEnabled: valueChanged ? true : this.state.transitionEnabled\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const valueChanged = this.checkIfValueChanged(prevProps);\n\n    if (this.getProp('autoPlay') !== this.getProp('autoPlay', prevProps) || valueChanged) {\n      this.resetInterval();\n    }\n  }\n\n  componentWillUnmount() {\n    this.trackRef && this.trackRef.removeEventListener('transitionend', this.onTransitionEnd);\n\n    if (this.node) {\n      this.node.ownerDocument.removeEventListener('mousemove', this.onMouseMove);\n      this.node.ownerDocument.removeEventListener('mouseup', this.onMouseUp);\n      this.node.ownerDocument.removeEventListener('touchmove', this.onTouchMove);\n      this.node.ownerDocument.removeEventListener('touchend', this.onTouchEnd);\n    }\n\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('load', this.onResize);\n\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n  /* ========== tools ========== */\n\n\n  render() {\n    return _react.default.createElement(\"div\", {\n      className: (0, _classnames.default)('BrainhubCarousel', this.getProp('className')),\n      ref: el => this.node = el\n    }, this.renderCarouselItems());\n  }\n\n}\n\nexports.default = Carousel;\nCarousel.propTypes = {\n  value: _propTypes.default.number,\n  onChange: _propTypes.default.func,\n  children: _propTypes.default.node,\n  slides: _propTypes.default.arrayOf(_propTypes.default.node),\n  slidesPerPage: _propTypes.default.number,\n  slidesPerScroll: _propTypes.default.number,\n  itemWidth: _propTypes.default.number,\n  offset: _propTypes.default.number,\n  autoPlay: _propTypes.default.number,\n  clickToChange: _propTypes.default.bool,\n  centered: _propTypes.default.bool,\n  infinite: _propTypes.default.bool,\n  draggable: _propTypes.default.bool,\n  keepDirectionWhenDragging: _propTypes.default.bool,\n  animationSpeed: _propTypes.default.number,\n  className: _propTypes.default.string\n};\nCarousel.defaultProps = {\n  slidesPerPage: 1,\n  slidesPerScroll: 1,\n  animationSpeed: 500,\n  draggable: true\n};","map":{"version":3,"sources":["/opt/lampp/htdocs/introrafte/node_modules/@4c/react-carousel/lib/components/Carousel.js"],"names":["exports","__esModule","default","_react","_interopRequireWildcard","require","_throttle","_interopRequireDefault","_times","_propTypes","_classnames","_config","_CarouselItem","obj","newObj","key","Object","prototype","hasOwnProperty","call","desc","defineProperty","getOwnPropertyDescriptor","get","set","Carousel","Component","constructor","_props","getCurrentValue","props","value","getNeededAdditionalClones","Math","ceil","state","infiniteTransitionFrom","getChildren","length","getAdditionalClonesLeft","additionalClones","getAdditionalClonesRight","getClonesLeft","numberOfInfiniteClones","getClonesRight","getAdditionalClonesOffset","getCarouselElementWidth","getProp","propName","customProps","checkIfValueChanged","prevProps","currentValue","clamp","prevValue","resetInterval","interval","clearInterval","autoPlay","setInterval","document","hidden","nextSlide","children","slides","Array","isArray","getActiveSlideIndex","getCurrentSlideIndex","getSlidesBounds","customValue","times","low","high","getTargetMod","targetSlide","abs","getTargetSlide","mod","onResize","width","node","offsetWidth","setState","carouselWidth","windowWidth","window","innerWidth","resizeEventListenerThrottle","onTouchStart","e","index","clicked","dragStart","changedTouches","pageX","onTouchMove","dragOffset","onMouseUpTouchEnd","clickDragThreshold","preventDefault","changeSlide","getNearestSlideIndex","onTransitionEnd","transitionEnabled","maxValue","onChange","prevSlide","slideIndexOffset","floor","round","itemWidth","getTransformOffset","additionalOffset","additionalClonesOffset","renderCarouselItems","transformOffset","numberOfClonesLeft","numberOfClonesRight","trackLengthMultiplier","trackWidth","animationSpeed","draggable","trackStyles","marginLeft","transform","transitionDuration","clonesLeft","clonesRight","concat","createElement","className","style","ref","el","trackRef","map","carouselItem","currentSlideIndex","offset","clickable","componentDidMount","addEventListener","passive","componentWillReceiveProps","nextProps","valueChanged","componentDidUpdate","componentWillUnmount","removeEventListener","ownerDocument","onMouseMove","onMouseUp","onTouchEnd","render","propTypes","number","func","arrayOf","slidesPerPage","slidesPerScroll","clickToChange","bool","centered","infinite","keepDirectionWhenDragging","string","defaultProps"],"mappings":"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","sourcesContent":["\"use strict\";\n\nexports.__esModule = true;\nexports.default = void 0;\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _throttle = _interopRequireDefault(require(\"lodash/throttle\"));\n\nvar _times = _interopRequireDefault(require(\"lodash/times\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _classnames = _interopRequireDefault(require(\"classnames\"));\n\nvar _config = _interopRequireDefault(require(\"../constants/config\"));\n\nvar _CarouselItem = _interopRequireDefault(require(\"./CarouselItem\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }\n\n/* eslint-disable react/no-unused-prop-types */\n// we disable propTypes usage checking as we use getProp function\n\n/* eslint react/no-deprecated: 0 */\n// TODO: update componentWillReceiveProps compononent to use static getDerivedStateFromProps instead\nclass Carousel extends _react.Component {\n  constructor(_props) {\n    super(_props);\n\n    this.getCurrentValue = () => this.props.value;\n\n    this.getNeededAdditionalClones = () => Math.ceil((this.getCurrentValue() - this.state.infiniteTransitionFrom) / this.getChildren().length);\n\n    this.getAdditionalClonesLeft = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones < 0 ? -additionalClones : 0;\n    };\n\n    this.getAdditionalClonesRight = () => {\n      const additionalClones = this.getNeededAdditionalClones();\n      return additionalClones > 0 ? additionalClones : 0;\n    };\n\n    this.getClonesLeft = () => _config.default.numberOfInfiniteClones + this.getAdditionalClonesLeft();\n\n    this.getClonesRight = () => _config.default.numberOfInfiniteClones + this.getAdditionalClonesRight();\n\n    this.getAdditionalClonesOffset = () => -this.getChildren().length * this.getCarouselElementWidth() * this.getAdditionalClonesLeft();\n\n    this.getProp = (propName, customProps = null) => {\n      const props = customProps || this.props;\n      return props[propName];\n    };\n\n    this.checkIfValueChanged = prevProps => {\n      const currentValue = this.getProp('infinite') ? this.props.value : this.clamp(this.props.value);\n      const prevValue = this.getProp('infinite') ? prevProps.value : this.clamp(prevProps.value);\n      return currentValue !== prevValue;\n    };\n\n    this.resetInterval = () => {\n      if (this.interval) {\n        clearInterval(this.interval);\n      }\n\n      const autoPlay = this.getProp('autoPlay');\n\n      if (autoPlay != null) {\n        this.interval = setInterval(() => {\n          if (!document.hidden) {\n            this.nextSlide();\n          }\n        }, autoPlay);\n      }\n    };\n\n    this.getChildren = () => {\n      if (!this.props.children) {\n        if (this.props.slides) {\n          return this.props.slides;\n        }\n\n        return [];\n      }\n\n      if (Array.isArray(this.props.children)) {\n        return this.props.children;\n      }\n\n      return [this.props.children];\n    };\n\n    this.getActiveSlideIndex = () => this.getProp('infinite') ? this.getCurrentSlideIndex() + this.getClonesLeft() * this.getChildren().length : this.getCurrentSlideIndex();\n\n    this.getSlidesBounds = (customValue = null) => {\n      const value = customValue == null ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      const times = (value + 1) / length;\n      const ceil = Math.ceil(times);\n      return {\n        low: (ceil - 1) * length,\n        high: ceil * length - 1\n      };\n    };\n\n    this.getTargetMod = (customValue = null) => {\n      const value = customValue == null ? this.getCurrentValue() : customValue;\n      const length = this.getChildren().length;\n      let targetSlide;\n\n      if (value >= 0) {\n        targetSlide = value % length;\n      } else {\n        targetSlide = (length - Math.abs(value % length)) % length;\n      }\n\n      return targetSlide;\n    };\n\n    this.getTargetSlide = () => {\n      if (this.state.infiniteTransitionFrom != null) {\n        const mod = this.getTargetMod(this.state.infiniteTransitionFrom);\n        const value = this.getCurrentValue();\n        return mod + (value - this.state.infiniteTransitionFrom);\n      }\n\n      return this.getTargetMod();\n    };\n\n    this.onResize = (0, _throttle.default)(() => {\n      const width = this.node.offsetWidth;\n      this.setState({\n        carouselWidth: width,\n        windowWidth: window.innerWidth\n      });\n    }, _config.default.resizeEventListenerThrottle);\n\n    this.onTouchStart = (e, index) => {\n      this.setState({\n        clicked: index,\n        dragStart: e.changedTouches[0].pageX\n      });\n    };\n\n    this.onTouchMove = e => {\n      if (this.state.dragStart !== null) {\n        this.setState({\n          dragOffset: e.changedTouches[0].pageX - this.state.dragStart\n        });\n      }\n    };\n\n    this.onMouseUpTouchEnd = e => {\n      if (this.state.dragStart !== null) {\n        if (this.getProp('draggable')) {\n          if (Math.abs(this.state.dragOffset) > _config.default.clickDragThreshold) {\n            e.preventDefault();\n            this.changeSlide(this.getNearestSlideIndex());\n          } else if (this.getProp('clickToChange')) {\n            this.changeSlide(this.state.clicked);\n          }\n        }\n\n        this.setState({\n          clicked: null,\n          dragOffset: 0,\n          dragStart: null\n        });\n      }\n    };\n\n    this.onTransitionEnd = () => {\n      this.setState({\n        transitionEnabled: false,\n        infiniteTransitionFrom: null\n      });\n    };\n\n    this.clamp = value => {\n      const maxValue = this.getChildren().length - 1;\n\n      if (value > maxValue) {\n        return maxValue;\n      }\n\n      if (value < 0) {\n        return 0;\n      }\n\n      return value;\n    };\n\n    this.changeSlide = value => this.props.onChange(this.getProp('infinite') ? value : this.clamp(value));\n\n    this.nextSlide = () => this.changeSlide(this.getCurrentValue() + this.getProp('slidesPerScroll'));\n\n    this.prevSlide = () => this.changeSlide(this.getCurrentValue() - this.getProp('slidesPerScroll'));\n\n    this.getNearestSlideIndex = () => {\n      let slideIndexOffset = 0;\n\n      if (this.getProp('keepDirectionWhenDragging')) {\n        if (this.state.dragOffset > 0) {\n          slideIndexOffset = -Math.ceil(this.state.dragOffset / this.getCarouselElementWidth());\n        } else {\n          slideIndexOffset = -Math.floor(this.state.dragOffset / this.getCarouselElementWidth());\n        }\n      } else {\n        slideIndexOffset = -Math.round(this.state.dragOffset / this.getCarouselElementWidth());\n      }\n\n      return this.getCurrentValue() + slideIndexOffset;\n    };\n\n    this.getCurrentSlideIndex = () => {\n      if (this.getProp('infinite')) {\n        return this.getTargetSlide();\n      }\n\n      return this.clamp(this.getCurrentValue());\n    };\n\n    this.getCarouselElementWidth = () => this.props.itemWidth || this.state.carouselWidth / this.getProp('slidesPerPage');\n\n    this.getTransformOffset = () => {\n      const additionalOffset = this.getProp('centered') ? this.state.carouselWidth / 2 - this.getCarouselElementWidth() / 2 : 0;\n      const dragOffset = this.getProp('draggable') ? this.state.dragOffset : 0;\n      const currentValue = this.getActiveSlideIndex();\n      const additionalClonesOffset = this.getAdditionalClonesOffset();\n      return dragOffset - currentValue * this.getCarouselElementWidth() + additionalOffset - additionalClonesOffset;\n    };\n\n    this.renderCarouselItems = () => {\n      const transformOffset = this.getTransformOffset();\n      const children = this.getChildren();\n      const numberOfClonesLeft = this.getClonesLeft();\n      const numberOfClonesRight = this.getClonesRight();\n      const trackLengthMultiplier = 1 + (this.getProp('infinite') ? numberOfClonesLeft + numberOfClonesRight : 0);\n      const trackWidth = this.state.carouselWidth * children.length * trackLengthMultiplier;\n      const animationSpeed = this.getProp('animationSpeed');\n      const transitionEnabled = this.state.transitionEnabled;\n      const draggable = this.getProp('draggable') && children && children.length > 1;\n      const trackStyles = {\n        marginLeft: `${this.getAdditionalClonesOffset()}px`,\n        width: `${trackWidth}px`,\n        transform: `translateX(${transformOffset}px)`,\n        transitionDuration: transitionEnabled ? `${animationSpeed}ms, ${animationSpeed}ms` : null\n      };\n      let slides = children;\n\n      if (this.getProp('infinite')) {\n        const clonesLeft = (0, _times.default)(numberOfClonesLeft, () => children);\n        const clonesRight = (0, _times.default)(numberOfClonesRight, () => children);\n        slides = [].concat(...clonesLeft, children, ...clonesRight);\n      }\n\n      return _react.default.createElement(\"div\", {\n        className: \"BrainhubCarousel__trackContainer\"\n      }, _react.default.createElement(\"ul\", {\n        className: (0, _classnames.default)('BrainhubCarousel__track', {\n          'BrainhubCarousel__track--transition': transitionEnabled,\n          'BrainhubCarousel__track--draggable': draggable\n        }),\n        style: trackStyles,\n        ref: el => this.trackRef = el\n      }, slides.map((carouselItem, index) => _react.default.createElement(_CarouselItem.default, {\n        key: index,\n        currentSlideIndex: this.getActiveSlideIndex(),\n        index: index,\n        width: this.getCarouselElementWidth(),\n        offset: index !== slides.length ? this.props.offset : 0,\n        onTouchStart: this.onTouchStart,\n        clickable: this.getProp('clickToChange')\n      }, carouselItem))));\n    };\n\n    this.state = {\n      carouselWidth: 0,\n      windowWidth: 0,\n      clicked: null,\n      dragOffset: 0,\n      dragStart: null,\n      transitionEnabled: false,\n      infiniteTransitionFrom: null // indicates what slide we are transitioning from (in case of infinite carousel), contains number value or null\n\n    };\n    this.interval = null;\n  }\n  /* ========== initial handlers and positioning setup ========== */\n\n\n  componentDidMount() {\n    // adding listener to remove transition when animation finished\n    this.trackRef && this.trackRef.addEventListener('transitionend', this.onTransitionEnd); // adding event listeners for swipe\n\n    if (this.node) {\n      this.node.addEventListener('touchstart', this.onTouchStart, true);\n      this.node.addEventListener('touchmove', this.onTouchMove, {\n        passive: false\n      });\n      this.node.addEventListener('touchend', this.onMouseUpTouchEnd, true);\n    } // setting size of a carousel in state\n\n\n    window.addEventListener('resize', this.onResize);\n    this.onResize(); // setting size of a carousel in state based on styling\n\n    window.addEventListener('load', this.onResize); // setting autoplay interval\n\n    this.resetInterval();\n  }\n\n  componentWillReceiveProps(nextProps) {\n    const valueChanged = this.checkIfValueChanged(nextProps);\n\n    if (this.state.transitionEnabled) {\n      return this.setState({\n        transitionEnabled: valueChanged ? true : this.state.transitionEnabled\n      });\n    }\n\n    this.setState({\n      infiniteTransitionFrom: this.getCurrentValue(),\n      transitionEnabled: valueChanged ? true : this.state.transitionEnabled\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    const valueChanged = this.checkIfValueChanged(prevProps);\n\n    if (this.getProp('autoPlay') !== this.getProp('autoPlay', prevProps) || valueChanged) {\n      this.resetInterval();\n    }\n  }\n\n  componentWillUnmount() {\n    this.trackRef && this.trackRef.removeEventListener('transitionend', this.onTransitionEnd);\n\n    if (this.node) {\n      this.node.ownerDocument.removeEventListener('mousemove', this.onMouseMove);\n      this.node.ownerDocument.removeEventListener('mouseup', this.onMouseUp);\n      this.node.ownerDocument.removeEventListener('touchmove', this.onTouchMove);\n      this.node.ownerDocument.removeEventListener('touchend', this.onTouchEnd);\n    }\n\n    window.removeEventListener('resize', this.onResize);\n    window.removeEventListener('load', this.onResize);\n\n    if (this.interval) {\n      clearInterval(this.interval);\n    }\n  }\n  /* ========== tools ========== */\n\n\n  render() {\n    return _react.default.createElement(\"div\", {\n      className: (0, _classnames.default)('BrainhubCarousel', this.getProp('className')),\n      ref: el => this.node = el\n    }, this.renderCarouselItems());\n  }\n\n}\n\nexports.default = Carousel;\nCarousel.propTypes = {\n  value: _propTypes.default.number,\n  onChange: _propTypes.default.func,\n  children: _propTypes.default.node,\n  slides: _propTypes.default.arrayOf(_propTypes.default.node),\n  slidesPerPage: _propTypes.default.number,\n  slidesPerScroll: _propTypes.default.number,\n  itemWidth: _propTypes.default.number,\n  offset: _propTypes.default.number,\n  autoPlay: _propTypes.default.number,\n  clickToChange: _propTypes.default.bool,\n  centered: _propTypes.default.bool,\n  infinite: _propTypes.default.bool,\n  draggable: _propTypes.default.bool,\n  keepDirectionWhenDragging: _propTypes.default.bool,\n  animationSpeed: _propTypes.default.number,\n  className: _propTypes.default.string\n};\nCarousel.defaultProps = {\n  slidesPerPage: 1,\n  slidesPerScroll: 1,\n  animationSpeed: 500,\n  draggable: true\n};"]},"metadata":{},"sourceType":"script"}